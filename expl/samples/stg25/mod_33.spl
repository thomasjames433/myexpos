alias fnum R1;


if(fnum==2 || fnum==1 )then //0

alias blockNum R2;
alias offSet R3;

alias buffNum R5;
buffNum = blockNum%4;


multipush(R1,R2,R3,R4,R5);
R1=1;
R2= [SYSTEM_STATUS_TABLE+1];
R3= buffNum;
call MOD_0;
multipop(R1,R2,R3,R4,R5);

if([BUFFER_TABLE + buffNum*4 ]!= blockNum)then //1

if([BUFFER_TABLE + buffNum*4 +1]==1)then //2

multipush(R1,R2,R3,R4,R5);
R1=1;
R2= [SYSTEM_STATUS_TABLE+1];
R3= 71 + buffNum;
R4=[BUFFER_TABLE + buffNum*4];
call MOD_4;
multipop(R1,R2,R3,R4,R5);

[BUFFER_TABLE + buffNum*4 +1]=0;

endif; //2


multipush(R1,R2,R3,R4,R5);
R1=2;
R4=blockNum;
R2= [SYSTEM_STATUS_TABLE+1];
R3= 71 + buffNum;
call MOD_4;
multipop(R1,R2,R3,R4,R5);
[BUFFER_TABLE + buffNum*4 ]=blockNum;

endif; //1

if(fnum==2 )then //0
alias memAdd R4;
[memAdd]=[(71 + buffNum)*512 +offSet];
endif;

if(fnum==1 )then //0

alias word R4;

[(71+buffNum)*512 +offSet ]=word;
[BUFFER_TABLE + buffNum*4 +1]=1;

endif;

multipush(R1,R2,R3,R4,R5);
R1=2;
R2= [SYSTEM_STATUS_TABLE+1];
R3=  buffNum;
call MOD_0;
multipop(R1,R2,R3,R4,R5);
return;

endif; //0

if(fnum == CLOSE)then

    alias inodeIndex R4;
    alias fileIndex R2;

    inodeIndex = [OPEN_FILE_TABLE + fileIndex*4 + 0];
    [OPEN_FILE_TABLE + fileIndex*4 + 1] = [OPEN_FILE_TABLE + fileIndex*4 + 1] - 1;

    if([OPEN_FILE_TABLE + fileIndex*4 + 1] == 0)then

        [OPEN_FILE_TABLE + fileIndex*4 + 0] = -1;
        [OPEN_FILE_TABLE + fileIndex*4 + 1] = -1;
        [OPEN_FILE_TABLE + fileIndex*4 + 2] = -1;
        [OPEN_FILE_TABLE + fileIndex*4 + 3] = -1;

        if(inodeIndex != INODE_ROOT)then
            [FILE_STATUS_TABLE + inodeIndex*4 + 1] = [FILE_STATUS_TABLE + inodeIndex*4 + 1] - 1;
            if([FILE_STATUS_TABLE + inodeIndex*4 + 1] == 0)then
                [FILE_STATUS_TABLE + inodeIndex*4 + 1] = -1;
            endif;
        endif;
        
    endif;  
endif;

if(fnum == OPEN)then

    alias inodeIndex R5;
    alias FileName R2;
    
    inodeIndex = 0;
    while(inodeIndex < MAX_FILE_NUM && [INODE_TABLE + inodeIndex*16 + 1] != FileName)do
        inodeIndex = inodeIndex + 1;
    endwhile;

    if(inodeIndex == MAX_FILE_NUM)then
        R0 = -1;
        return;
    endif;

    multipush(R0, R1, R2, R3, R4, R5);
    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inodeIndex;
    call MOD_0;
    R10 = R0;
    multipop(R0, R1, R2, R3, R4, R5);

    if(R10 == -1)then
        print "no inode";
        R0 = -1;
    else
        if([INODE_TABLE + inodeIndex*16 + 0] == EXEC)then
            print "exec";
            R0 = -1;
        else
            alias fileIndex R6;
            fileIndex = 0;

            while(fileIndex < MAX_OPENFILE_NUM)do
                if([OPEN_FILE_TABLE + fileIndex*4 + 0] == -1)then
                    break;
                endif;
                fileIndex = fileIndex + 1;
            endwhile;

            if(fileIndex == MAX_OPENFILE_NUM)then
                R0 = -2;
            else

                alias fileTable R7;
                alias openFileTable R8;
                fileTable = FILE_STATUS_TABLE + inodeIndex*4;
                openFileTable = OPEN_FILE_TABLE + fileIndex*4;

                if(FileName =="root")then
                    [openFileTable + 0] = INODE_ROOT;
                else
                    if([fileTable + 1] == -1)then
                        [fileTable + 1] = 1;
                    else
                        [fileTable + 1] = [fileTable + 1] + 1;
                    endif;
                    [openFileTable + 0] = inodeIndex;
                endif;

                [openFileTable + 1] = 1;
                [openFileTable + 2] = 0;
                
                R0 = fileIndex;
            endif;
        endif;
    endif;
    
    multipush(R0);
    R1 = RELEASE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inodeIndex;
    call MOD_0;
    R10 = R0;   
    multipop(R0);

endif;

return;
