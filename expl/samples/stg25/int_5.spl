alias syscallno R1;
alias usersp R10;
usersp=SP;

syscallno=[[PTBR + 2*(usersp-5)/512]*512 + (usersp-5)%512];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11]*512 -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 9]=syscallno;


if(syscallno==2)then  //0


alias processTable R2;
processTable = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET;

alias processTableEntry R3;
processTableEntry = 0;

while(processTableEntry < 8)do
if([processTable + 2*processTableEntry] == -1)then
break;
endif;
processTableEntry = processTableEntry + 1;
endwhile;

if(processTableEntry==8)then  //1
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -3;
else

multipush(R1,R2,R3,R10);
R1=3;
R2 = [[PTBR + 2*(usersp - 4)/512] * 512 + (usersp - 4)%512];
call MOD_3;
multipop(R1,R2,R3,R10);

if(R0<0 )then //2
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = R0;

else
[processTable + processTableEntry*2] = FILE;
[processTable + processTableEntry*2 + 1] = R0;
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = R0;

endif; //2


endif; //1
endif; //0


if(syscallno==3)then //3

alias fileDesc R2;
fileDesc= [[PTBR + 2*(usersp - 4)/512] * 512 + (usersp - 4)%512];

if(fileDesc<0 || fileDesc>7)then //4
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -1;

else

alias pprt R3;
pprt=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET;


if([pprt + fileDesc*2] !=FILE)then //5
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -1;

else


multipush(R0,R1,R2,R3);
R1 = 4;
R2 =[pprt + fileDesc*2 +1 ]  ;
call MOD_3;
multipop(R0,R1,R2, R3);

[pprt + fileDesc*2]=-1;
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = 0;
 

endif; //5
endif; //4

endif; //3

if(syscallno==6)then //0

alias fileDesc R2;
fileDesc= [[PTBR + 2*(usersp - 4)/512] * 512 + (usersp - 4)%512];

if(fileDesc<0 || fileDesc>7)then //1
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -1;

else

alias pprt R3;
pprt=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 +11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2;


if([pprt] !=FILE)then //2
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -1;

else
alias oft R4;
alias inodeIndex R5;

oft = [pprt + 1];
inodeIndex = [OPEN_FILE_TABLE + oft*4 + 0];


multipush(R1, R2, R3, R4, R5, R10);
R1 = ACQUIRE_INODE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = inodeIndex;
call MOD_0;
multipop(R1, R2, R3, R4, R5, R10);

if(R0==-1)then //3
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -1;
else

alias lSeek R6;
lSeek = OPEN_FILE_TABLE + oft*4 + 2;

alias fileSize R7;
fileSize = [INODE_TABLE + inodeIndex*16 + 2];
if(inodeIndex == INODE_ROOT)then
fileSize = 480;
endif;

alias offSet R8;
offSet = [[PTBR + 2*(usersp - 3)/512]*512 + (usersp - 3)%512];

if([lSeek] + offSet<0)then
[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = -2;

else
if(offSet == 0)then
[lSeek] = 0;

else

if([lSeek] + offSet>fileSize)then
[lSeek] = fileSize;

else
[lSeek] = [lSeek] + offSet;

endif;
endif;

[[PTBR + 2*(usersp - 1)/512]*512 + (usersp - 1)%512] = 0;

endif;


multipush(R1, R2, R3, R4, R5, R6, R7, R8,  R10);
R1 = RELEASE_INODE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = inodeIndex;
call MOD_0;
multipop(R1, R2, R3, R4, R5, R6, R7, R8, R10);


endif; //3

endif; //2

endif; //1

endif; //0


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] *16 +9 ] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] *16 + 13];
ireturn;
