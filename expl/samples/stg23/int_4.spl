alias syscallno R1;
alias usersp R0;
usersp=SP;

syscallno=[[PTBR + 2*(usersp-5)/512]*512 + (usersp-5)%512];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11]*512-1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 9]=syscallno;


alias filename R2;
filename=[[PTBR + 2*(usersp-4)/512]*512 + (usersp-4)%512];

alias permission R3;
permission=[[PTBR + 2*(usersp-3)/512]*512 + (usersp-3)%512];

alias i R4;
i=0;
while(i<60)do

if([INODE_TABLE + i*16 +1]==filename)then
break;
endif;
i=i+1;
endwhile;

if((i!=60 && syscallno ==1) || (i==60 && syscallno==4)  )then   // 3
[[PTBR + 2*(usersp-1)/512]*512 + (usersp-1)%512]=-1;

else
if(syscallno==1)then  // 2

i=0;
while(i<60 && [INODE_TABLE + i*16 +1]!=-1)do
i=i+1;
endwhile;

if(i==60)then  // 1
[[PTBR + 2*(usersp-1)/512]*512 + (usersp-1)%512]=-1;
else

[INODE_TABLE + i*16]=DATA;
[INODE_TABLE + i*16 +1]=filename;
[INODE_TABLE + i*16 +2]=0;
[INODE_TABLE + i*16 +3]=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +3];
[INODE_TABLE + i*16 +4]=permission;


[ROOT_FILE + i*8] = filename;
[ROOT_FILE + i*8 + 1] = 0;
[ROOT_FILE + i*8 + 2] = DATA;
[ROOT_FILE + i*8 + 3] = [ USER_TABLE +  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +3]*2 ] ;
[ROOT_FILE + i*16 +4]=permission;

[[PTBR + 2*(usersp-1)/512]*512 + (usersp-1)%512]=0;


endif; //1

endif;  // 2 

if(syscallno ==4)then  //4


if([INODE_TABLE + i*16] != DATA || ([INODE_TABLE + i*16 + 4] == EXCLUSIVE && [SYSTEM_STATUS_TABLE + 1] != 1 && [INODE_TABLE + i*16 + 3] != [SYSTEM_STATUS_TABLE + 1]))then //5
[[PTBR + (usersp - 1) * 2/512]*512 + (usersp - 1) % 512] = -1;
else

multipush(R0, R1, R2, R3, R4);
R1 = ACQUIRE_INODE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = i;
call MOD_0;
multipop(R0, R1, R2, R3, R4);

if([FILE_STATUS_TABLE + i*4 +1]!=-1)then // 6


multipush(R0, R1, R2, R3, R4);
R1 = RELEASE_INODE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = i;
call MOD_0;
multipop(R0, R1, R2, R3, R4);

[[PTBR + 2*(usersp-1)/512]*512 + (usersp-1)%512]=-2;

else

alias index R5;
index=0;
alias block R6;
block= INODE_TABLE +i*16 +8;

while(index<4)do

if([block +index] !=-1) then //7

if( [BUFFER_TABLE + ([block +index]%MAX_BUFFER) *4] == [block + index] && [BUFFER_TABLE + ([block +index]%MAX_BUFFER) *4 + 1] == 1)then
[BUFFER_TABLE + ([block +index]%MAX_BUFFER) *4 + 1] = 0;
endif;

multipush(R0, R1, R2, R3, R4, R5, R6);
R1 = RELEASE_BLOCK;
R2 = [INODE_TABLE + i*16 + index];
call MOD_2;
multipop(R0, R1, R2, R3, R4, R5, R6);

endif; //7

index=index+1;
endwhile;

alias iterator R7;
iterator = 0;
while(iterator<16)do
[INODE_TABLE + i*16 + iterator] = -1;
if(iterator<8)then
[ROOT_FILE + i*8 +iterator ] = -1;
endif;
iterator=iterator+1;
endwhile;

multipush(R0, R1, R2, R3, R4,R5,R6,R7);
R1 = RELEASE_INODE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = i;
call MOD_0;
multipop(R0, R1, R2, R3, R4,R5,R6,R7);
[[PTBR + 2*(usersp-1)/512]*512 + (usersp-1)%512]=0;

endif; // 6
endif; //5
endif; // 4
endif;   // 3

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] *16 +9 ] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] *16 + 13];
ireturn;
