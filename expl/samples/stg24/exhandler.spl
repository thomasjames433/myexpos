[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +9]=-1;

[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +13]=SP;

SP=[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +11]*512-1;

backup;
multipush(EIP);

if(EC!=0 || [PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +13]== PTLR*512-1)then

if([PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +13]== PTLR*512-1)then

print"Stack Overflow";

endif;

if(EC==1)then
print "Illegal Instruction";

endif;

if(EC==2)then
print "Illegal Memory access";

endif;

if(EC==3)then
print "Arithmetic Exception";

endif;

R1=3;
R2=[SYSTEM_STATUS_TABLE +1];
call MOD_1;

call MOD_5;

else


if(EPN==4 || EPN==5 || EPN==6 || EPN==7)then

alias blockno R2;
blockno=[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10+ EPN];

multipush(R0,R1,R2);
R1=5;
R2=blockno;
call MOD_2;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 +EPN*2]=R0;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 +EPN*2 +1]="1100";
multipop(R0,R1,R2);

endif;

if(EPN==2 || EPN==3)then

R1=1;
call MOD_2;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 +4]=R0;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 +5]="1110";


R1=1;
call MOD_2;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 +6]=R0;
[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 +7]="1110";

endif;

endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

multipop(EIP);

restore;


SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
SP = SP + 1;

[ [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 2 * (SP / 512)] * 512 + (SP % 512)] = EIP;

ireturn;
