
[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16+ 13] = SP;

SP = [PROCESS_TABLE +[SYSTEM_STATUS_TABLE +1]*16 + 11]*512 -1;

backup;


if([SYSTEM_STATUS_TABLE +5]!=0)then //0

if([SYSTEM_STATUS_TABLE +1]==15) then
R1=[SYSTEM_STATUS_TABLE+5];
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_6;
endif;

if([SYSTEM_STATUS_TABLE+1]==0)then
goto context_switch;
endif;


else //0



if([SYSTEM_STATUS_TABLE+2]<MEM_LOW)then //1


[SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;

else //1


if([SYSTEM_STATUS_TABLE +4]>0)then //2

if([SYSTEM_STATUS_TABLE+2]>MEM_HIGH)then //3

[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;


else //3

alias counter R0;
counter =0;

while(counter<MAX_PROC_NUM)do

if([PROCESS_TABLE + counter*16+6]==1 && [PROCESS_TABLE+ counter*16]>MAX_TICK)then
[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
break;
endif;

counter=counter+1;
endwhile;

endif; //3



endif; //2



endif;  //1



endif; //0




[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]* 16 + 4] = READY;

alias i R5;
i=0;
while(i < 16) do
  [PROCESS_TABLE + i*16] = [PROCESS_TABLE + i*16] + 1;
  i = i + 1;
endwhile;


context_switch:
	call SCHEDULER;

restore;

SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +13];
ireturn;
