[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 8;

alias userSP R10;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]* 512 - 1;

multipush(R10);
R1 = GET_PCB_ENTRY;
call MOD_1;
multipop(R10);

alias childID R5;
R5 = R0;

if(childID == -1)then
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
    [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    ireturn;
endif;

alias childPTBR R9;
childPTBR = [PROCESS_TABLE + childID*16 + 14];

//HEAP ALLOCATION

if([PTBR + 4] == -1)then
    multipush(R5, R9, R10);

    R1 = GET_FREE_PAGE;
    call MOD_2;
    [PTBR + 4] = R0;
    [PTBR + 5] = "0110";

    R1 = GET_FREE_PAGE;
    call MOD_2;
    [PTBR + 6] = R0;
    [PTBR + 7] = "0110";
    
    multipop(R5, R9, R10);
endif;

//STACK ALLOCATION

multipush(R5, R9, R10);
R1 = GET_FREE_PAGE;
call MOD_2;
multipop(R5, R9, R10);

[childPTBR + 16] = R0;
[childPTBR + 17] = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 17];

multipush(R5, R9, R10);
R1 = GET_FREE_PAGE;
call MOD_2;
multipop(R5, R9, R10);

[childPTBR + 18] = R0;
[childPTBR + 19] = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 19];

//USER AREA PAGE
multipush(R5, R9, R10);
R1 = GET_FREE_PAGE;
call MOD_2;
multipop(R5, R9, R10);
 
//SETTING UP THE PROCESS TABLE

[PROCESS_TABLE + childID*16 + 0] = 0;                                                            //tick
[PROCESS_TABLE + childID*16 + 2] = [SYSTEM_STATUS_TABLE + 1];                                    //parent id
[PROCESS_TABLE + childID*16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3];           //user id
[PROCESS_TABLE + childID*16 + 4] = CREATED;                                                      //state
[PROCESS_TABLE + childID*16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 6];           //swap flag
[PROCESS_TABLE + childID*16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7];           //inode index
[PROCESS_TABLE + childID*16 + 9] = 0;                                                            //mode flag
[PROCESS_TABLE + childID*16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 10];         //user area swap status
[PROCESS_TABLE + childID*16 + 11] = R0;
[PROCESS_TABLE + childID*16 + 12] = 0;                                                           //KPTR
[PROCESS_TABLE + childID*16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];         //UTPR


alias counter R4;

//SETTING UP THE DISK MAP TABLE
counter = 0;
while (counter < 10) do
    [DISK_MAP_TABLE + 10 * childID + counter] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + counter];
    counter = counter + 1;
endwhile;

// page table entries && SETTIGN UP THE PER PROCESS RESOUCE TABLE
counter = 0;
while (counter < 16) do
    [childPTBR + counter] = [PTBR + counter];
    if (counter%2 ==0 && [childPTBR + counter] != -1) then
        [MEMORY_FREE_LIST + [childPTBR + counter]] = [MEMORY_FREE_LIST + [childPTBR + counter]] + 1;
    endif;
    counter = counter + 1;
endwhile;

alias newResourceTable R7;
alias oldResourceTable R8;
R7 = [PROCESS_TABLE + childID*16 + 11]*512 + RESOURCE_TABLE_OFFSET;
R8 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET;

counter = 0;
while (counter < 16) do
    [newResourceTable + counter] = [oldResourceTable + counter];
    [newResourceTable + counter + 1] = [oldResourceTable + counter + 1];

    if([oldResourceTable + counter] == SEMAPHORE)then
        [SEMAPHORE_TABLE + [oldResourceTable + counter + 1]*4 + 1] = [SEMAPHORE_TABLE + [oldResourceTable + counter + 1]*4 + 1] + 1;
    endif;

    if([oldResourceTable + counter] == FILE)then
        [OPEN_FILE_TABLE + [oldResourceTable + counter + 1]*4 + 1] = [OPEN_FILE_TABLE + [oldResourceTable + counter + 1]*4 + 1] + 1;
    endif;

    counter = counter + 2;
endwhile;

counter = 0;
while (counter < 512) do
    [[childPTBR + 16] * 512 + counter] = [[PTBR + 16] * 512 + counter];
    [[childPTBR + 18] * 512 + counter] = [[PTBR + 18] * 512 + counter];
    counter = counter + 1;
endwhile;

[[PROCESS_TABLE + childID * 16 + 11] * 512] = BP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//SETTING RETURN VALUES FOR THE PROCESSES
[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = childID;
[[childPTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

ireturn;
