alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]* 512 - 1;

alias sysNum R1;
sysNum=[([PTBR + 2 * (userSP - 5)/512] * 512) + (userSP - 5)%512];

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = sysNum;

alias NameOfFile R2;
NameOfFile=[([PTBR + 2 * (userSP - 4)/512] * 512) + (userSP - 4)%512];

alias permission R3;
permission=[([PTBR + 2 * (userSP - 3)/512] * 512) + (userSP - 3)%512];

alias counter R4;
counter = 0;

while(counter<60)do 
    if([INODE_TABLE + counter*16 + 1]==NameOfFile)then
        break;
    endif;
    counter = counter + 1;
endwhile;

if((sysNum == INT_DELETE && counter == 60) || (sysNum == INT_CREATE && counter != 60))then
    [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = 0;
else
    if(sysNum == INT_CREATE)then
        counter = 0;
        while(counter < MAX_FILE_NUM && [INODE_TABLE + counter*16 + 1] != -1)do
            counter = counter + 1;
        endwhile;

        if(counter == MAX_FILE_NUM)then
            [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = -1;
        else

            [INODE_TABLE + counter*16 + 0] = DATA;
            [INODE_TABLE + counter*16 + 1] = NameOfFile;
            [INODE_TABLE + counter*16 + 2] = 0;
            [INODE_TABLE + counter*16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3];
            [INODE_TABLE + counter*16 + 4] = permission;

            [ROOT_FILE + counter*8 + 0] = NameOfFile;
            [ROOT_FILE + counter*8 + 1] = 0;
            [ROOT_FILE + counter*8 + 2] = DATA;
            [ROOT_FILE + counter*8 + 3] = [USER_TABLE + [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3] * 2];
            [ROOT_FILE + counter*8 + 4] = permission;
            
            [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = 0;
        endif;
    endif;

    if(sysNum == INT_DELETE)then
        
        if([INODE_TABLE + counter*16] != DATA || ([INODE_TABLE + counter*16 + 4] == EXCLUSIVE && [SYSTEM_STATUS_TABLE + 1] != 1 && [INODE_TABLE + counter*16 + 3] != [SYSTEM_STATUS_TABLE + 1]))then
            [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = -1;
        else
            multipush(R0, R1, R2, R3, R4);
            R1 = ACQUIRE_INODE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = counter;
            call MOD_0;
            multipop(R0, R1, R2, R3, R4);

            if([FILE_STATUS_TABLE + counter*4 + 1] != -1)then
                
                multipush(R0, R1, R2, R3, R4);
                R1 = RELEASE_INODE;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = counter;
                call MOD_0;
                multipop(R0, R1, R2, R3, R4);

                [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = -2;
            else
                alias index R5;
                index = 0;
                alias block R6;
                block = INODE_TABLE + counter*16 + 8;
                while(index < 4)do
                    if([block + index] != -1)then

                        if([BUFFER_TABLE + ([block + index]%MAX_BUFFER)*4] == [block + index] && [BUFFER_TABLE + ([block + index]%MAX_BUFFER)*4 + 1] == 1)then
                            [BUFFER_TABLE + ([block + index]%MAX_BUFFER)*4 + 1] = 0;
                        endif;

                        multipush(R0, R1, R2, R3, R4, R5, R6);
                        R1 = RELEASE_BLOCK;
                        R2 = [INODE_TABLE + counter*16 + index];
                        call MOD_2;
                        multipop(R0, R1, R2, R3, R4, R5, R6);

                    endif;
                    index = index + 1;
                endwhile;
                
                alias iterator R7;
                iterator = 0;
                while(iterator<16)do
                    [INODE_TABLE + counter*16 + iterator] = -1;
                    iterator = iterator + 1;
                    if(iterator<8)then
                        [ROOT_FILE + counter*8] = -1;
                    endif;
                endwhile;

                multipush(R0, R1, R2, R3, R4);
                R1 = RELEASE_INODE;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = counter;
                call MOD_0;
                multipop(R0, R1, R2, R3, R4);
                [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = 0;
            endif;
        endif;
    endif;
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;
