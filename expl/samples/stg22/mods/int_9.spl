//print "INT-9";
alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]* 512 - 1;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 9;

alias NameOfFile R1;
NameOfFile=[([PTBR + 2 * (userSP - 4)/512] * 512) + (userSP - 4)%512];

alias inode_index R2;
alias flag R3;
flag = 0;
inode_index = 0;
while(inode_index<60)do 
    if([INODE_TABLE + inode_index*16 + 1]==NameOfFile)then
        break;
    endif;
    inode_index = inode_index + 1;
endwhile;

if(inode_index == 60)then
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 0;
    [[PTBR + (userSP - 1) * 2/512]*512 + (userSP - 1) % 512] = -1;
    ireturn;
endif;

multipush(R0, R1, R2, R3);
R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0, R1, R2, R3);
//print "exit cmpltd";

[MEMORY_FREE_LIST + [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]] = [MEMORY_FREE_LIST + [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512-1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = inode_index;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//invalidating heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//stack
multipush(R0, R1, R2, R3);
R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";
multipop(R0, R1, R2, R3);

if([INODE_TABLE + inode_index*16 + 8] != -1)then
    multipush(R0, R1, R2, R3);
    R1 = GET_CODE_PAGE;
    R2 = [INODE_TABLE + inode_index*16 + 8];
    call MOD_2;
    [PTBR + 8] = R0;
    [PTBR + 8 + 1] = "0100";
    multipop(R0, R1, R2, R3);
else   
    [PTBR + 8] = -1;
    [PTBR + 8 + 1] = "0000";
endif;

alias counter R4;
counter = 5;
while(counter<8)do
    [PTBR + 2*counter] = -1;
    [PTBR + 2*counter + 1] = "0000";
    counter = counter + 1;
endwhile;


//initializing the disk map
counter = 0;
while(counter < 10)do
    if(counter>3 && counter<8)then
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + counter] = [INODE_TABLE + inode_index*16 + 8 + counter - 4];
    else
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + counter] = -1;
    endif;
    counter = counter + 1;
endwhile;

//per-process resource table
counter = 0;
alias PerProcessTable R5;
PerProcessTable = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET;
while(counter < 16)do
    [PerProcessTable + counter] = -1;
    counter = counter + 2;
endwhile;

[[PTBR +16]*512] = [[PTBR + 8]*512 + 1];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 0;
SP = 8*512;
ireturn;
