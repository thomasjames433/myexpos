alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

//store the BP value
multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + (currentPID * 16);

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


// Switch the process ID

alias newPID R2;
alias count R3;
alias flag R9;
flag = 0;
count = (currentPID + 1)%16;

while(count != currentPID) do
	if([PROCESS_TABLE + count*16 + 4]==CREATED || [PROCESS_TABLE + count*16 + 4]==READY)then
		flag = 1;
		newPID=count;
		break;
	endif;
	count = (count + 1)%16;
endwhile;
	
if(flag == 0)then
	newPID = 0;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + (newPID * 16);

SP = [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then

	BP = [[new_process_table + 11]*512];

	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	[new_process_table + 9] = 0;

	ireturn;

endif;

[new_process_table + 4] = RUNNING;

//restore the BP value;
multipop(BP);

return;
