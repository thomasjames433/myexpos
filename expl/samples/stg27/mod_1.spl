alias fnum R1;
alias cpid R2;

if (fnum==2)then

alias uap R6;
uap=[PROCESS_TABLE + cpid*16 +11];


alias resourceTable R7;
alias counter R8;
counter = 0;
resourceTable = uap*512 + RESOURCE_TABLE_OFFSET;

while(counter < 16)do

if([resourceTable + counter] == SEMAPHORE)then

multipush(R1, R2, R6, R7, R8);
R1 = RELEASE_SEMAPHORE;
R3 = [resourceTable + counter + 1];
call MOD_0;           
multipop(R1, R2,R6, R7, R8);
endif;

if([resourceTable + counter] == FILE)then

multipush(R1, R2, R6, R7, R8);
R1 = 4;
R2 = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET+counter + 1];
R3 = [resourceTable + counter + 1];
call MOD_3;
multipop(R1, R2,R6, R7, R8);
endif;


counter = counter + 2;
endwhile;



multipush(R1,R2,R3);
R1=2;
R2=uap;
call MOD_2;

multipop(R1,R2,R3);

return;
endif;


if(fnum==3)then

multipush(R1, R2);

    R1 = FREE_PAGE_TABLE;
    call MOD_1;

    //freeing the userareapage of the program.
    R1 = FREE_USER_AREA_PAGE;
    call MOD_1;


multipop(R1, R2);

if([PROCESS_TABLE + cpid*16 +9]!=9)then
alias i R3;
i = 0;
while (i < 16) do
if ([PROCESS_TABLE + i * 16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + i * 16 + 5]==cpid  ) then
[PROCESS_TABLE + i * 16 + 4] = READY;
endif;

if ([PROCESS_TABLE + i * 16 + 2] == cpid) then
[PROCESS_TABLE + i * 16 + 2] = -1;
endif;
i = i + 1;
endwhile;
endif;


[PROCESS_TABLE + cpid*16 +4]=TERMINATED;

return;
endif;




if(fnum==4)then

alias ptbr R3;

ptbr = [PROCESS_TABLE + cpid*16 + 14] ;

[ptbr+0]=-1;
[ptbr+1]="0000";
[ptbr+2]=-1;
[ptbr+3]="0000";

alias i R4;
 i =4;
    while(i < 20) do
        if( [ptbr + i] != -1) then
            multipush(R0,R1,R2,R3,R4);
            R1 = 2 ;
            R2 = [ptbr+i] ;
            call MOD_2 ;
breakpoint;
            multipop(R0,R1,R2,R3,R4);

            [ptbr + i] = -1;
            [ptbr + i + 1] = "0000" ;
        endif;
       i = i + 2 ;
    endwhile;
return;

i=2;
while(i<10)do

if([DISK_MAP_TABLE+ cpid*10 +i]!=-1)then

if(i==2 || i==3 || i==8 || i==9)then

multipush(R1, R2, R3, R4);             
R1 = 4;                
R3 = cpid;
R2 = [DISK_MAP_TABLE + cpid * 10 + i];
call MOD_2;
multipop(R1, R2, R3, R4);

endif;

[DISK_MAP_TABLE + cpid * 10 + i] = -1;
endif;

i=i+1;
endwhile;
return;
endif;


if(fnum==1)then

alias i R4;
i = 1;
while (i < 16) do
if ([PROCESS_TABLE + i * 16 + 4] == TERMINATED) then
break;
endif;
i = i + 1;
endwhile;
if (i == 16) then
R0 = -1;
else
[PROCESS_TABLE + i * 16 + 1] = i;
[PROCESS_TABLE + i * 16 + 4] = ALLOCATED;
[PROCESS_TABLE + i * 16 + 14] = PAGE_TABLE_BASE + (20 * i);
[PROCESS_TABLE + i * 16 + 15] = 10;
R0 = i;
endif;

return;

endif;


if(fnum == KILL_ALL)then

    alias counter R3;
    counter = 0;
    while(counter < 60)do
        if([INODE_TABLE + counter*16 + 1] != -1)then
            multipush(R1, R2, R3);
            R1 = ACQUIRE_INODE;
	    R2=[SYSTEM_STATUS_TABLE+1];
            R3 = counter;

            call MOD_0;
            multipop(R1, R2, R3);
        endif;
        counter = counter + 1;
    endwhile;
print "HI";
    
    counter = 2;
    while(counter < 16)do
        if(counter != cpid && [PROCESS_TABLE + counter*16 + 4] != TERMINATED)then
            multipush(R1, R2, R3);
            R1 = EXIT_PROCESS;
            R2 = counter;
            call MOD_1;
            multipop(R1, R2, R3);
        endif;
        counter = counter + 1;
    endwhile;
    
    counter = 0;
    while(counter < 60)do
        if([INODE_TABLE + counter*16 + 1] != -1)then
            multipush(R1, R2, R3);
            R1 = RELEASE_INODE;
            R3 = counter;
            call MOD_0;
            multipop(R1, R2, R3);
        endif;
        counter = counter + 1;
    endwhile;

    return;
endif;
return;
