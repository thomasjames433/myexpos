alias functionNum R1;
alias currentPID R2;

if(functionNum==3)then

    multipush(R1, R2, R3);
    functionNum = 8;
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1, R2, R3);

    print R3;

    multipush(R1, R2, R3);
    functionNum = 9;
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1, R2, R3);

    return;
endif;

if(functionNum==4)then  

    multipush(R1, R2, R3);
    functionNum = 8;
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1, R2, R3);

    read;

    [PROCESS_TABLE + currentPID*16 + 4]=WAIT_TERMINAL;
    
    multipush(R1, R2, R3);
    call MOD_5;
    multipop(R1, R2, R3);

    alias word R6;
	word = ([PTBR + 2 * (R3 / 512)] * 512) + (R3 % 512);
    [word]=[PROCESS_TABLE + currentPID*16 + 8];

    return;
endif;


if(functionNum==DISK_LOAD)then

    multipush(R1, R2, R3, R4, R5);
    functionNum = ACQUIRE_DISK;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5);

    [DISK_STATUS_TABLE + 1]=0;
    [DISK_STATUS_TABLE + 2]=R3;
    [DISK_STATUS_TABLE + 3]=R4;
    
    load(R3, R4);

    [PROCESS_TABLE + currentPID*16 + 4]=WAIT_DISK;

    multipush(R1, R2, R3, R4, R5);
    call MOD_5;
    multipop(R1, R2, R3, R4, R5);

    return;
endif;

if(functionNum == DISK_STORE)then

    alias pageNum R3;
    alias blockNum R4;

    multipush(R1, R2, R3, R4);
    R1 = ACQUIRE_DISK;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 1]=1;
    [DISK_STATUS_TABLE + 2]=pageNum;
    [DISK_STATUS_TABLE + 3]=blockNum;

    store(pageNum, blockNum);

    [PROCESS_TABLE + currentPID*16 + 4]=WAIT_DISK;

    multipush(R1, R2, R3, R4, R5);
    call MOD_5;
    multipop(R1, R2, R3, R4, R5);
    return;
endif;
