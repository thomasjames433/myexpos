alias fnum R1;
alias cpid R2;


if(fnum==1)then //0

alias buffNum R3;
while([BUFFER_TABLE + buffNum*4 + 2] != -1)do

[PROCESS_TABLE + cpid*16 + 4] = WAIT_BUFFER;
[PROCESS_TABLE + cpid*16 + 5] = buffNum;

multipush(R1, R2, R3);
call MOD_5;
multipop(R1, R2, R3);
endwhile;

[BUFFER_TABLE + buffNum*4 + 2] = cpid;

return;

endif; //0


if(fnum==2)then //0

alias buffNum R3;

if(cpid != [BUFFER_TABLE + buffNum*4 + 2])then
R0 = -1;
return;
endif;

[BUFFER_TABLE + buffNum*4 + 2] = -1;

alias counter R5;
counter = 0;
while(counter<16)do
if([PROCESS_TABLE + counter*16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + counter*16 + 5] == buffNum)then
[PROCESS_TABLE + counter*16 + 4] = READY;
endif;
counter = counter + 1;
endwhile;

R0 = 0;
return;
endif; //0


if (fnum==3)then

while([DISK_STATUS_TABLE]==1)do


[PROCESS_TABLE + cpid*16 +4]=WAIT_DISK;

multipush(R1,R2,R3,R4,R5);
call SCHEDULER;
multipop(R1,R2,R3,R4,R5);

endwhile;

[DISK_STATUS_TABLE] = 1;
[DISK_STATUS_TABLE + 4] = cpid;

return;

endif;


if(fnum==6)then

alias i R0;
i=0;

while(i<MAX_SEM_COUNT)do

if([SEMAPHORE_TABLE +i*4 +1]==0)then
[SEMAPHORE_TABLE +i*4 +1]=1;
[SEMAPHORE_TABLE +i*4]=-1;
return;
endif;


i=i+1;
endwhile;

i=-1;
return;

endif;


if(fnum==4)then //0

alias inodeIndex R3;
while([FILE_STATUS_TABLE + inodeIndex*4] != -1)do

[PROCESS_TABLE + cpid*16 + 4] = WAIT_FILE;
[PROCESS_TABLE + cpid*16 + 5] = inodeIndex;

multipush(R1, R2, R3, R4);
call MOD_5;
multipop(R1, R2, R3, R4);

endwhile;

if([FILE_STATUS_TABLE + inodeIndex*4] == -1 && [FILE_STATUS_TABLE + inodeIndex*4 + 1] == -1 && [FILE_STATUS_TABLE + inodeIndex*4 + 2] == -1 && [FILE_STATUS_TABLE + inodeIndex*4 + 3] == -1)then
R0 = -1;
return;
endif;

[FILE_STATUS_TABLE + inodeIndex*4] = cpid;

R0 = 0;
return;

endif; //0 

if(fnum==5)then // 1

alias inodeIndex R3;

if([FILE_STATUS_TABLE + inodeIndex*4] != cpid)then
R0 = -1;
return;
endif;

[FILE_STATUS_TABLE + inodeIndex*4] = -1;

alias counter R5;
counter = 0;
while(counter < 16)do
if([PROCESS_TABLE + counter*16 + 4] == WAIT_FILE && [PROCESS_TABLE + counter*16 + 5] == cpid)then
[PROCESS_TABLE +counter*16 + 4] = READY;
endif;
counter = counter + 1;
endwhile;

R0 = 0;
return;

endif; // 1

if(fnum==7)then

alias semid R3;

if([SEMAPHORE_TABLE +semid*4]==cpid)then
[SEMAPHORE_TABLE +semid*4]=-1;

alias i R4;
i=0;
while(i<16)do

if([PROCESS_TABLE + i*16 +4]==WAIT_SEMAPHORE && [PROCESS_TABLE + i*16 +5]==semid)then
[PROCESS_TABLE + i*16 +4]=READY;
endif;

i=i+1;
endwhile;

[SEMAPHORE_TABLE +semid*4+1]=[SEMAPHORE_TABLE +semid*4+1]-1;

endif;
return;

endif;

if (fnum==8)then

while([TERMINAL_STATUS_TABLE]==1)do
[PROCESS_TABLE +cpid*16+4]=WAIT_TERMINAL;
multipush(R0,R1,R2,R3);

call MOD_5;
multipop(R0,R1,R2,R3);

endwhile;

[TERMINAL_STATUS_TABLE]=1;
[TERMINAL_STATUS_TABLE+1]=cpid;
R0=0;
return;

endif;

if (fnum==9)then

if( [TERMINAL_STATUS_TABLE+1]!=cpid)then
R0=-1;
return;

else

[TERMINAL_STATUS_TABLE]=0;
alias i R9;
i=0;

while(i < 16) do 

if([PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL) then
[PROCESS_TABLE + i*16 + 4] = READY;
endif;
i=i+1;
endwhile;

R0=0;
return;

endif;

endif;

R0=-1;
return;
