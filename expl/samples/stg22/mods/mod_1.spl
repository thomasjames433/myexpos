alias funNo R1;
alias currPID R2;
if(funNo == FREE_USER_AREA_PAGE)then

    alias userpage R6;
    userpage = [PROCESS_TABLE + currPID*16 + 11];


    alias resourceTable R7;
    alias counter R8;
    counter = 0;
    resourceTable = userpage*512 + RESOURCE_TABLE_OFFSET;

    while(counter < 16)do
        if([resourceTable + counter] == SEMAPHORE)then
            multipush(R1, R2, R6, R7, R8);

            R1 = RELEASE_SEMAPHORE;
            R3 = [resourceTable + counter + 1];
            call MOD_0;
            
            multipop(R1, R2, R6, R7, R8);
        endif;
        counter = counter + 2;
    endwhile;
    

    multipush(R1, R2, R6, R7);

    R2 = userpage;
    R1 = RELEASE_PAGE;
    call MOD_2;

    multipop(R1, R2, R6, R7);
    return;

endif;
if(funNo == EXIT_PROCESS) then
    multipush(R1, R2);

    //freeing the pagetable entries.
    R1 = FREE_PAGE_TABLE;
    call MOD_1;

    //freeing the userareapage of the program.
    R1 = FREE_USER_AREA_PAGE;
    call MOD_1;

    multipop(R1, R2);

    if([PROCESS_TABLE + currPID*16 + 9] != 9)then
        alias counter R7;
        counter = 0;
        while(counter < 16)do
            if([PROCESS_TABLE + counter*16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + counter*16 + 5] == currPID)then
                [PROCESS_TABLE + counter*16 + 4] = READY;
            endif;
            if([PROCESS_TABLE + counter*16 + 2] ==  currPID)then
                [PROCESS_TABLE + counter*16 + 2] = -1;
            endif;
            counter = counter + 1;
        endwhile;
    endif;

    [PROCESS_TABLE + currPID*16 + 4]=TERMINATED;


    return;
endif;
if(funNo == FREE_PAGE_TABLE)then

    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias page R7;
    alias auxilary R8;
    page = 4;
    auxilary = 5;

    while(page < 20)do
         if([PAGE_TABLE_BASE + 20*currPID + page]!=-1)then
            //releasing the page
            multipush(R1, R2, R7, R8);
            R1 = RELEASE_PAGE;
            R2 = [PAGE_TABLE_BASE + 20*currPID + page];
            call MOD_2;
            multipop(R1, R2, R7, R8);

            //invalidating the entries in page table
            [PAGE_TABLE_BASE + 20*currPID + page] = -1;
            [PAGE_TABLE_BASE + 20*currPID + auxilary] = "0000";
        endif;
        page = page + 2;
        auxilary = auxilary + 2;
    endwhile;

    alias counter R6;
    counter = 2;
    while(counter<10)do
        if([DISK_MAP_TABLE + currPID*10 + counter]!=-1 && (counter < 4 || counter > 7))then
            multipush(R1, R2, R3, R4, R5, R6);
            R1 = RELEASE_BLOCK;
            R2 = [DISK_MAP_TABLE + currPID*10 + counter];
            call MOD_2;
            multipop(R1, R2, R3, R4, R5, R6);
        endif;
        counter = counter + 1;
    endwhile;

    //invalidate all entries of disk map table.
    counter = 0;
    while(counter<10)do
        [DISK_MAP_TABLE + counter] = -1;
        counter = counter + 1;
    endwhile;

    return;
endif;

if(funNo == GET_PCB_ENTRY)then

    alias pcbEntry R0;
    pcbEntry = 0;

    while(pcbEntry < 16 && [PROCESS_TABLE + 16*pcbEntry + 4] != TERMINATED)do
        pcbEntry = pcbEntry + 1;
    endwhile;
    
    //no valid PCB found
    if(pcbEntry == 16)then
        pcbEntry = -1;
        return;
    endif;

    [PROCESS_TABLE + 16*pcbEntry + 4] = ALLOCATED;
    [PROCESS_TABLE + 16*pcbEntry + 1] = pcbEntry;
    [PROCESS_TABLE + 16*pcbEntry + 14] = PAGE_TABLE_BASE + 20*pcbEntry;
    [PROCESS_TABLE + 16*pcbEntry + 15] = 10;

    return;
endif;
