\\alias usersp R0;
usersp=SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13]=SP;
// SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9]=9;

alias arg1 R1;

arg1=[   [PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 2* ((usersp-4)/512) ]*512 + (usersp-4)%512  ];


alias inode R2;
inode=0;

while(inode < MAX_FILE_NUM)do

if([INODE_TABLE + inode*16 +1]==arg1)then
break;
endif;

inode =inode+1;

endwhile;

if(inode==MAX_FILE_NUM)then

SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] ;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0 ;
[ [PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 2* ((usersp-1)/512) ]*512 + ( (usersp-1)%512 ) ]=-1;
ireturn;

endif;


multipush(R0,R1,R2);
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;

multipop(R0,R1,R2);

alias uap R3;
uap=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];
[MEMORY_FREE_LIST+uap]=[MEMORY_FREE_LIST+uap]+1;
[SYSTEM_STATUS_TABLE +2] = [SYSTEM_STATUS_TABLE + 2] -1 ;

SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11] ;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4]=RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7]=inode ;

//library

[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 0] = 63;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 1] = "0100";
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 2] = 64;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 3] = "0100";


//Heap
multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2 ;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 4] = R0 ; 
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 5] = "0110" ;


R1= 1;
call MOD_2;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 6] = R0; 
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 7] = "0110";
multipop(R0,R1,R2,R3);


// Code
alias i R4;
i=0;
while(i<4)do

        multipush(R0,R1,R2,R3,R4);


if( [ INODE_TABLE + inode*16 + 8 +i] != -1) then

        R1 = GET_FREE_PAGE ;
        call MOD_2 ;

        [PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 8 + i*2] = R0 ;
        [PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 8 + i*2 + 1] = "0100";

    else

        [PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 8 + i*2] = -1 ;
        [PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 8 + i*2 + 1] = "0000";
    endif;

    i = i + 1;

endwhile;

        multipop(R0,R1,R2,R3,R4);


//Stack
multipush(R0,R1,R2,R3,R4,R5);
R1 = 1;
call MOD_2 ;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 16] = R0 ;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 17] = "0110";
multipop(R0,R1,R2,R3,R4,R5);

multipush(R0,R1,R2,R3,R4,R5);
R1 = 1;
call MOD_2;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 18] = R0 ;
[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 19] = "0110" ;
multipop(R0,R1,R2,R3,R4,R5);

i=0;

breakpoint;
while(i < 4) do 
	
    if([INODE_TABLE + inode*16 + 8 + i] != -1) then
        loadi([PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 8 + i*2], [INODE_TABLE + inode*16 + 8 + i]);
    endif;
    i = i + 1;
endwhile;

[[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 16]*512] = [[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 8]*512 + 1];

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 0;
SP = 8*512;
ireturn;
