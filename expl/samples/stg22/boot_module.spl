//mod 7

//ex-handler
loadi(2,15);
loadi(3,16);

//library
loadi(63,13);
loadi(64,14);

//boot module
loadi(54,67);
loadi(55,68);

//timer
loadi(4,17);
loadi(5,18);

//Disk INT
loadi(6,19); 
loadi(7,20);

//init
loadi(65,7);
loadi(66,8);

//idle
loadi(69,11);
loadi(70,12);

//console
loadi(8,21);
loadi(9,22);

//int 6
loadi(14,27);
loadi(15,28);

//int 7
loadi(16,29);
loadi(17,30);

//int 8 fork
loadi(18,31);
loadi(19,32);

//int 9
loadi(20,33);
loadi(21,34);

//int 10
loadi(22,35);
loadi(23,36);

//int 11
loadi(24,37);
loadi(25,38);

//int 13
loadi(28,41);
loadi(29,42);

//int 14
loadi(30,43);
loadi(31,44);

//int 15
loadi(32,45);
loadi(33,46);


//module 0 resource manager
loadi(40,53);
loadi(41,54);

//module 1 process manager
loadi(42,55);
loadi(43,56);

//module 2 memory manager
loadi(44,57);
loadi(45,58);

//module 4 device manager
loadi(48,61);
loadi(49,62);

//module 5 scheduler
loadi(50,63);
loadi(51,64);

//inode table
loadi(59,3);
loadi(60,4);

//disk free list
loadi(61,2);

alias i R0;

i=0;

[SYSTEM_STATUS_TABLE + 2] = 0 ; 

while(i < 128) do
    if(i < 83) then
        [MEMORY_FREE_LIST + i] = 1 ;
    else 
        [MEMORY_FREE_LIST + i] = 0 ;
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;
  i = i + 1;
endwhile;  

[SYSTEM_STATUS_TABLE + 3] = 0 ;



PTBR=PAGE_TABLE_BASE +20;
PTLR=10;



[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";


[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

alias idp R6;
idp=PROCESS_TABLE+16;
[idp+1]=1;
[idp+4]=CREATED;
[idp+11]=80;
[idp+12]=0;
[idp+13]=8*512;
[idp+14]=PTBR;
[idp+15]=10;
[76*512]=[65*512+1];

// per-process resource table initialization
i = 1;
while (i < 9) do
    [([PROCESS_TABLE + 16 + 11] + 1) * 512 - 2 * i] = -1;
    i = i + 1;
endwhile;

//semaphore table
i = 0;
while(i< MAX_SEM_COUNT)do
    [SEMAPHORE_TABLE + i*4] = -1;
    [SEMAPHORE_TABLE + i*4 + 1] = 0;
    i=i+ 1;
endwhile;

// disk map table initialization

[DISK_MAP_TABLE + 10 + 2] = -1;
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7; //where init code resides on the disk
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1;
[DISK_MAP_TABLE + 10 + 9] = -1;


[PROCESS_TABLE + 2*16 + 4] = TERMINATED;
[PROCESS_TABLE + 3*16 + 4] = TERMINATED;
[PROCESS_TABLE + 4*16 + 4] = TERMINATED;
[PROCESS_TABLE + 5*16 + 4] = TERMINATED;
[PROCESS_TABLE + 6*16 + 4] = TERMINATED;
[PROCESS_TABLE + 7*16 + 4] = TERMINATED;
[PROCESS_TABLE + 8*16 + 4] = TERMINATED;
[PROCESS_TABLE + 9*16 + 4] = TERMINATED;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED;

[TERMINAL_STATUS_TABLE+1]=0;
[DISK_STATUS_TABLE] = 0 ; 


return;

