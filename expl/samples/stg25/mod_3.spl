alias fnum R1;

if(fnum==2 || fnum==1 )then //0

alias blockNum R2;
alias offset R3;

alias buffNum R5;
buffNum = blockNum%4;

multipush(R1,R2,R3,R4,R5);
R1=1;
R2= [SYSTEM_STATUS_TABLE+1];
R3= buffNum;
call MOD_0;
multipop(R1,R2,R3,R4,R5);

if([BUFFER_TABLE + buffNum*4 ]!= blockNum)then //1

if([BUFFER_TABLE + buffNum*4 +1]==1)then //2

multipush(R1,R2,R3,R4,R5);
R1=1;
R2= [SYSTEM_STATUS_TABLE+1]; 
R3= 71 + buffNum;
R4=[BUFFER_TABLE + buffNum*4];
call MOD_4;
multipop(R1,R2,R3,R4,R5);

endif; //2
[BUFFER_TABLE + buffNum*4 +1]=0;


multipush(R1,R2,R3,R4,R5);
R1=2;
R4=blockNum;
R2= [SYSTEM_STATUS_TABLE+1];
R3= 71 + buffNum;
call MOD_4;
multipop(R1,R2,R3,R4,R5);
[BUFFER_TABLE + buffNum*4 ]=blockNum;

endif; //1

if(fnum==2) //99
alias memAdd R4;
[memAdd]=[(71 + buffNum)*512 +offset];

else
alias word R4;
[(71+buffNum)*512 +offset ]=word;
[BUFFER_TABLE + buffNum*4 +1]=1;

endif; //99

multipush(R1,R2,R3,R4,R5);
R1=2;
R2= [SYSTEM_STATUS_TABLE+1];
R3=  buffNum;
call MOD_0;
multipop(R1,R2,R3,R4,R5);
return;

endif; //0


if(fnum==3)then //0

alias filename R2;
alias inodeIndex R3;

inodeIndex = 0;
while(inodeIndex < MAX_FILE_NUM && [INODE_TABLE + inodeIndex*16 + 1] != filename)do
inodeIndex = inodeIndex + 1;
endwhile;

if(inodeIndex == MAX_FILE_NUM)then
R0 = -1;
return;
endif;

multipush(R0,R1,R2,R3);
R1=4;
R2=inodeIndex;
R3=[SYSTEM_STATUS_TABLE +1];
call MOD_0;
R10=R0;
multipop(R0,R1,R2,R3);

if(R10==-1)then
R0=-1;
return;
endif;


if([INODE_TABLE + inodeIndex*16]==EXEC)then //1
R0=-1;

else

alias fileIndex R4;
fileIndex=0;

while(fileIndex<MAX_OPENFILE_NUM)do
if([OPEN_FILE_TABLE +fileIndex*4]==-1)then
break;
endif;
fileIndex=fileIndex+1;
endwhile;

if(fileIndex==MAX_OPENFILE_NUM)then //2
R0=-2;

else

if(filename=="root")then //3
[OPEN_FILE_TABLE + fileIndex*4]=INODE_ROOT;

else

if([FILE_STATUS_TABLE + inodeIndex*4 +1]==-1)then  //4
[FILE_STATUS_TABLE + inodeIndex*4 +1]=1;
else
[FILE_STATUS_TABLE + inodeIndex*4 +1]=[FILE_STATUS_TABLE + inodeIndex*4 +1]+1;
endif; //4

[OPEN_FILE_TABLE + fileIndex*4]=inodeIndex;

endif; //3


[OPEN_FILE_TABLE + fileIndex*4 + 1] = 1;
[OPEN_FILE_TABLE + fileIndex*4 + 2] = 0;

R0=fileIndex;
endif; //2

endif; //1

multipush(R0, R1, R2, R3, R4, R5);
R1 = RELEASE_INODE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = inodeIndex;
call MOD_0;
multipop(R0, R1, R2, R3, R4, R5);

endif; //0


if(fnum==4)then //5

alias fileIndex R2;
alias inodeIndex R3;
inodeIndex = [OPEN_FILE_TABLE + fileIndex*4 + 0];
[OPEN_FILE_TABLE + fileIndex*4 + 1] = [OPEN_FILE_TABLE + fileIndex*4 + 1] - 1;

if([OPEN_FILE_TABLE + fileIndex*4 + 1] ==0)then //6

[OPEN_FILE_TABLE + fileIndex*4] = -1;
[OPEN_FILE_TABLE + fileIndex*4 + 1] = -1;
[OPEN_FILE_TABLE + fileIndex*4 + 2] = -1;
[OPEN_FILE_TABLE + fileIndex*4 + 3] = -1;

if(inodeIndex != INODE_ROOT)then //7

[FILE_STATUS_TABLE + inodeIndex*4 + 1] = [FILE_STATUS_TABLE + inodeIndex*4 + 1] - 1;

if([FILE_STATUS_TABLE + inodeIndex*4 + 1] == 0)then
[FILE_STATUS_TABLE + inodeIndex*4 + 1] = -1;
endif;

endif; //7

endif; //6

endif; //5

return;

