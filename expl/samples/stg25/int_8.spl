[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

alias usersp R0;
usersp = SP;

alias childpid R2;


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

multipush(R0);
R1=1;
call MOD_1;

childpid=R0;
multipop(R0);


if (childpid == -1) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    [[PTBR + 2 * ((usersp - 1)/512)] * 512 + (usersp - 1) % 512] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
ireturn;
endif;

alias childPTBR R9;
childPTBR = [PROCESS_TABLE + childpid*16 + 14];

if ([PTBR + 4] == -1) then
multipush(R0,R1,  R2);
R1 = 1;
call MOD_2;
[PTBR + 4] = R0;
[PTBR + 5] = "0110";
R1 = 1;
call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";
multipop(R0,R1, R2);
endif;

multipush(R0,R1,R2);
R1 = 1;
call MOD_2;
[childPTBR+ 16] = R0;
[childPTBR+ 17] = [PTBR+17];
R1 = 1;
call MOD_2;
[childPTBR+ 18] = R0;
[childPTBR+ 19] = [PTBR+19];

R1 = 1;
call MOD_2;
[PROCESS_TABLE + childpid*16 +11] = R0;

multipop(R0,R1,R2);



[PROCESS_TABLE + childpid * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3];
[PROCESS_TABLE + childpid * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6];
[PROCESS_TABLE + childpid* 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10]; 
[PROCESS_TABLE + childpid* 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7];
[PROCESS_TABLE + childpid* 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

[PROCESS_TABLE +  childpid*16 + 9] = 0;
[PROCESS_TABLE + childpid* 16 + 12] = 0;
[PROCESS_TABLE + childpid* 16 + 0] = 0;
[PROCESS_TABLE + childpid* 16 + 2] = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + childpid* 16 + 4] = CREATED;


alias i R4;
i = 0;

while (i < 512) do	
    [[childPTBR + 16] * 512 + i] = [[PTBR + 16] * 512 + i];
    [[childPTBR + 18] * 512 + i] = [[PTBR + 18] * 512 + i];
    i=i+ 1;
endwhile;


i = 0;
while (i < 10) do
[DISK_MAP_TABLE + childpid*10 + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
i = i + 1;
endwhile;

i = 0;
while (i < 16) do
[childPTBR+ i] = [PTBR + i];
[childPTBR + i + 1] = [PTBR + i + 1];
if ([childPTBR + i] != -1) then
[MEMORY_FREE_LIST + [childPTBR + i]] = [MEMORY_FREE_LIST + [childPTBR + i]] + 1;
endif;
i = i + 2;
endwhile;

print childpid;



alias olds R5;
alias news R6;

news = [PROCESS_TABLE + childpid*16 + 11]*512 + RESOURCE_TABLE_OFFSET;
olds = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET;

i = 0;
while (i < 16) do
    [news + i] = [olds + i];
    [news + i + 1] = [olds + i + 1];

    if([olds + i] == SEMAPHORE)then
        [SEMAPHORE_TABLE + [olds + i + 1]*4 + 1] = [SEMAPHORE_TABLE + [olds + i+ 1]*4 + 1] + 1;
    endif;

    if([olds + i] == FILE)then
        [OPEN_FILE_TABLE + [olds + i + 1]*4 + 1] = [OPEN_FILE_TABLE + [olds + i+ 1]*4 + 1] + 1;
    endif;


    i=i+ 2;
endwhile;



[[PROCESS_TABLE + childpid* 16 + 11] * 512] = BP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    
[[PTBR + 2 * ((usersp - 1) / 512)] * 512 + (usersp - 1) % 512] =  childpid;
[[childPTBR+ 2 * ((usersp - 1) / 512)] * 512 + (usersp - 1) % 512] = 0;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];


ireturn;
