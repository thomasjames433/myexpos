alias userSP R10;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 5;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]* 512 - 1;

alias sysNum R1;
alias fileDescriptor R2;

sysNum = [[PTBR + 2*(userSP - 5)/512]*512 + (userSP - 5)%512];
fileDescriptor=[([PTBR + 2 * (userSP - 4)/512] * 512) + (userSP - 4)%512];

alias word R3;
word = [[PTBR + 2*(userSP - 3)/512] * 512 + ((userSP - 3) % 512)];

alias retAdd R9;
retAdd = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;

if(fileDescriptor == -2)then
	
	multipush(R1, R2, R3, R9, R10);
	R1 = TERMINAL_WRITE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call MOD_4;
	multipop(R1, R2, R3, R9, R10);

	[retAdd] = 0;
else
	if(fileDescriptor<0 || fileDescriptor>7)then
        [retAdd] = -1;
		goto exit;
    endif;

	alias rtEntry R8;
	rtEntry = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET + fileDescriptor*2;
	
	if([rtEntry] != FILE)then
		[retAdd] = -1;
		goto exit;
	endif;

	alias oft R4;
	oft = [rtEntry + 1];

	alias inodeIndex R5;
	inodeIndex = [OPEN_FILE_TABLE + oft*4];
	
	if([INODE_TABLE + inodeIndex*16 + 4] == EXCLUSIVE && [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3] != [INODE_TABLE + inodeIndex*16 + 3] && [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3] != 1)then
		[retAdd] = -3;
		goto exit;
	endif;

	multipush(R1, R2, R3, R4, R5, R8, R9, R10);
	R1 = ACQUIRE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeIndex;
	call MOD_0;
	multipop(R1, R2, R3, R4, R5, R8, R9, R10);

	if(R0 == -1)then
		[retAdd] = -1;
		goto exit;
	endif;

	alias lSeek R7;
	lSeek = OPEN_FILE_TABLE + oft*4 + 2;

	if([lSeek] == MAX_FILE_SIZE)then
		multipush(R1, R2, R3, R4, R5, R7,  R8, R9, R10);
		R1 = RELEASE_INODE;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = inodeIndex;
		call MOD_0;
		multipop(R1, R2, R3, R4, R5, R7, R8, R9, R10);

		[retAdd] = -2;
		goto exit;
	endif;

	if([lSeek]%512 == 0 && [lSeek] == [INODE_TABLE + inodeIndex*16 + 2])then
	
		multipush(R1, R2, R3, R4, R5, R7, R8, R9, R10);
		R1 = GET_FREE_BLOCK;
		call MOD_2;
		multipop(R1, R2, R3, R4, R5, R7, R8, R9, R10);

		if(R0 == -1)then
			multipush(R1, R2, R3, R4, R5, R7, R8, R9, R10);
			R1 = RELEASE_INODE;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = inodeIndex;
			call MOD_0;
			R11 = R0;
			multipop(R1, R2, R3, R4, R5, R7, R8, R9, R10);

			[retAdd] = -2;
			goto exit;
		endif;		

		[INODE_TABLE + inodeIndex*16 + 8 + [lSeek]/512] = R0;
	endif;
	
	multipush(R1, R2, R3, R4, R5, R7, R8, R9, R10);
	R1 = BUFFERED_WRITE;
	R2 = [INODE_TABLE + inodeIndex*16 + 8 + [lSeek]/512];
	R4 = word;
	R3 = [lSeek]%512;
	call MOD_3;
	multipop(R1, R2, R3, R4, R5, R7, R8, R9, R10);

	if([lSeek] == [INODE_TABLE +inodeIndex*16 + 2])then
		[INODE_TABLE + inodeIndex*16 + 2] = [INODE_TABLE + inodeIndex*16 + 2] + 1;
		[ROOT_FILE + inodeIndex*8 + 1] = [ROOT_FILE + inodeIndex*8 + 1] + 1;
	endif;

	[lSeek] = [lSeek] + 1;

	multipush(R1, R2, R3, R4, R5, R8, R9, R10);
	R1 = RELEASE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inodeIndex;
	call MOD_0;
	R11 = R0;
	multipop(R1, R2, R3, R4, R5, R8, R9, R10);

	[retAdd] = 0;
	goto exit;
endif;

exit: 
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
