[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

alias usersp R0;
usersp = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

multipush(R0);
R1=1;
call MOD_1;

alias childpid R2;
childpid=R0;
multipop(R0);


if (childpid == -1) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    [[PTBR + 2 * ((usersp - 1)/512)] * 512 + (usersp - 1) % 512] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
else

if ([PTBR + 4] == -1) then
multipush(R0,R1,  R2);
R1 = 1;
call MOD_2;
[PAGE_TABLE_BASE + 20*childpid + 4] = R0;
[PAGE_TABLE_BASE + 20*childpid + 5] = "0110";
R1 = 1;
call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";
multipop(R0,R1, R2);
endif;

multipush(R0,R1,R2);
R1 = 1;
call MOD_2;
[PAGE_TABLE_BASE + 20*childpid + 16] = R0;
[PAGE_TABLE_BASE + 20*childpid + 17] = "0110";
R1 = 1;
call MOD_2;
[PAGE_TABLE_BASE + 20*childpid + 18] = R0;
[PAGE_TABLE_BASE + 20*childpid + 19] = "0110";

R1 = 1;
call MOD_2;
[PROCESS_TABLE + childpid*16 +11] = R0;

multipop(R0,R1,R2);



[PROCESS_TABLE + childpid * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3];
[PROCESS_TABLE + childpid * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6];
[PROCESS_TABLE + childpid* 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10]; 
[PROCESS_TABLE + childpid* 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7];
[PROCESS_TABLE + childpid* 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

[PROCESS_TABLE +  childpid*16 + 9] = 0;
[PROCESS_TABLE + childpid* 16 + 12] = 0;
[PROCESS_TABLE + childpid* 16 + 0] = 0;
[PROCESS_TABLE + childpid* 16 + 2] = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + childpid* 16 + 4] = CREATED;


alias i R4;
i = 512 - 16;
while (i < 512) do
[[PROCESS_TABLE + childpid* 16 + 11] * 512 + i] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i];
i = i + 1;
endwhile;


i = 0;
while (i < 10) do
[DISK_MAP_TABLE + childpid*10 + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
i = i + 1;
endwhile;

i = 0;
while (i < 16) do
[PAGE_TABLE_BASE + 20*childpid + i] = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1] + i];
[PAGE_TABLE_BASE + 20*childpid  + i + 1] = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1] + i + 1];
if ([PAGE_TABLE_BASE + 20*childpid  + i] != -1) then
[MEMORY_FREE_LIST + [PAGE_TABLE_BASE + 20*childpid  + i]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + 20*childpid  + i]] + 1;
endif;
i = i + 2;
endwhile;

print childpid;


alias olds R5;
alias news R6;

    news = [PAGE_TABLE_BASE + 20*childpid + 16];
    olds = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1] + 16];
    i = 0;
    while (i < 512) do
        [news * 512 + i] = [olds * 512 + i];
        i = i + 1;
    endwhile;

    news = [PAGE_TABLE_BASE + 20*childpid + 18];
    olds = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1] + 18];
    i = 0;
    while (i < 512) do
        [news * 512 + i] = [olds * 512 + i];
        i = i + 1;
    endwhile;

[[PROCESS_TABLE + childpid* 16 + 11] * 512] = BP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    
[[PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1] + 2 * ((usersp - 1) / 512)] * 512 + (usersp - 1) % 512] =  childpid;
[[PAGE_TABLE_BASE + 20*childpid + 2 * ((usersp - 1) / 512)] * 512 + (usersp - 1) % 512] = 0;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

endif;

ireturn;
